/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package View;

import Controller.BillController;
import Controller.ContractController;
import Controller.ContractDetailController;
import Controller.CustomerController;
import Controller.RoomController;
import Model.ContractDetailModel;
import Model.ContractModel;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nguye
 */
public class ExtendContractView extends javax.swing.JDialog {

    /**
     * Creates new form ExtendContractView
     */
    private DefaultTableModel model = new DefaultTableModel();

    public ExtendContractView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);

        model = (DefaultTableModel) extendListTB.getModel();

        showTB();

    }

    private String setStatus(String cmnd, String idC) {
        int ck = new ContractDetailController().getDistanceDate(cmnd, idC);
        return ck == 0 ? "Expired" : "About to expire";
    }

    private void showTB() {
        model.setRowCount(0);
        for (ContractDetailModel i : new ContractDetailController().getContractExtend()) {
            model.addRow(new Object[]{
                i.getIdContractFK(),
                i.getCmndFK(),
                new CustomerController().getFullNameCustomer(i.getCmndFK()),
                i.getStartDate(),
                i.getEndDate(),
                setStatus(i.getCmndFK(), i.getIdContractFK())
            });

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        extendListTB = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fromDate = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        toDate = new com.toedter.calendar.JDateChooser();
        extendBT = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        extendListTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Contract", "CMND", "Customer name", "Start date", "End date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        extendListTB.setGridColor(new java.awt.Color(255, 255, 255));
        extendListTB.setRowHeight(30);
        extendListTB.setSelectionBackground(new java.awt.Color(255, 204, 204));
        extendListTB.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        extendListTB.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        extendListTB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                extendListTBMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(extendListTB);
        if (extendListTB.getColumnModel().getColumnCount() > 0) {
            extendListTB.getColumnModel().getColumn(0).setResizable(false);
            extendListTB.getColumnModel().getColumn(1).setResizable(false);
            extendListTB.getColumnModel().getColumn(2).setResizable(false);
            extendListTB.getColumnModel().getColumn(3).setResizable(false);
            extendListTB.getColumnModel().getColumn(4).setResizable(false);
            extendListTB.getColumnModel().getColumn(5).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("List extend contract");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Extended from date");

        fromDate.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Extended to date");

        toDate.setEnabled(false);

        extendBT.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        extendBT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/extended.png"))); // NOI18N
        extendBT.setText("Extend contract");
        extendBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extendBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(173, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(fromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(87, 87, 87)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(toDate, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(159, 159, 159))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(302, 302, 302)
                .addComponent(extendBT)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel1)
                .addGap(59, 59, 59)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(extendBT)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void extendBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extendBTActionPerformed
        // TODO add your handling code here:
        int idx = extendListTB.getSelectedRow();
        
        if (new ContractDetailController().getContractExtend().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No information!!!");
        } else if (idx == -1) {
            JOptionPane.showMessageDialog(rootPane, "Please select a line");
        } else {
            int stt = new BillController().getMaxSTTBill(String.valueOf(model.getValueAt(idx, 0)));
            if (new BillController().checkBillPaidOrUnPaid(stt)) {
                fromDate.setDate(new ContractDetailController().getExtendFromDate(String.valueOf(model.getValueAt(idx, 1)), String.valueOf(model.getValueAt(idx, 0))));
                String idR = new ContractController().getIDRoom(String.valueOf(model.getValueAt(idx, 0)));
                SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
                String dt = s.format(fromDate.getDate());
                String idC = "HD_" + idR + "_" + dt;
                double money = new RoomController().getPriceRoom(idR);

                new ContractController().updateCheckOutDate(String.valueOf(model.getValueAt(idx, 0)), String.valueOf(model.getValueAt(idx, 4)));

                if (new ContractController().checkExist(idR)) {
                    if (new ContractController().insertContract(new ContractModel(idC, idR, dt, money, null, null, 1))) {
                        if (new ContractDetailController().insertContractDetail(new ContractDetailModel(String.valueOf(model.getValueAt(idx, 1)), idC, dt, null, null, true))) {
                            // set trạng thái của hợp đồng cũ thành hết hạn

                            new ContractDetailController().updateStatusContractDetail(String.valueOf(model.getValueAt(idx, 1)), String.valueOf(model.getValueAt(idx, 0)));
                            new ContractDetailController().updateEndDate(String.valueOf(model.getValueAt(idx, 1)), idC);
                            JOptionPane.showMessageDialog(rootPane, "Successfully!!!");
                            showTB();
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Failed!!!");
                        showTB();
                    }
                } else {
                    String idCon = new ContractController().getIDContract(idR);
                    if (new ContractDetailController().insertContractDetail(new ContractDetailModel(String.valueOf(model.getValueAt(idx, 1)), idCon, dt, null, null, true))) {

                        new ContractDetailController().updateStatusContractDetail(String.valueOf(model.getValueAt(idx, 1)), String.valueOf(model.getValueAt(idx, 0)));
                        new ContractDetailController().updateEndDate(String.valueOf(model.getValueAt(idx, 1)), idCon);
                        JOptionPane.showMessageDialog(rootPane, "Successfully!!!");
                        showTB();
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Failed!!!");
                        showTB();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "You can't check-out because you haven't paid the bill with ID: " + new BillController().getIDBill(stt));
            }
            
        }
    }//GEN-LAST:event_extendBTActionPerformed

    private void extendListTBMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_extendListTBMousePressed
        // TODO add your handling code here:
        int idx = extendListTB.getSelectedRow();
        if (idx != -1) {
            fromDate.setDate(new ContractDetailController().getExtendFromDate(String.valueOf(model.getValueAt(idx, 1)), String.valueOf(model.getValueAt(idx, 0))));
            toDate.setDate(new ContractDetailController().getExtendToDate(String.valueOf(model.getValueAt(idx, 1)), String.valueOf(model.getValueAt(idx, 0))));
        }
    }//GEN-LAST:event_extendListTBMousePressed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Windows".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ExtendContractView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ExtendContractView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ExtendContractView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ExtendContractView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                ExtendContractView dialog = new ExtendContractView(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton extendBT;
    private javax.swing.JTable extendListTB;
    private com.toedter.calendar.JDateChooser fromDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser toDate;
    // End of variables declaration//GEN-END:variables
}
