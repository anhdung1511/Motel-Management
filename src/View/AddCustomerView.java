/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
/**
 *
 * @author nguye
 */
package View;

import Controller.ContractController;
import Controller.ContractDetailController;
import Controller.CustomerController;
import Controller.RoomController;
import Controller.ServiceController;
import Model.ContractDetailModel;
import Model.ContractModel;
import Model.CustomerModel;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

public class AddCustomerView extends javax.swing.JDialog {

    /**
     * Creates new form AddCustomerView
     */
    private ContractDetailController detailContDAO = new ContractDetailController();
    private ContractController contractDAO = new ContractController();
    private CustomerController cusDAO = new CustomerController();
    private RoomController roomDAO = new RoomController();
    private ServiceController serviceDAO = new ServiceController();

    public boolean checkAdd = false;

    public boolean checkOldOrNew;

    public AddCustomerView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);

    }

    public void setIDAndMoney(String id, double money) {
        this.idRoomTxt.setText(id);
        this.moneyTxt.setText(String.valueOf(money));
        this.idRoomTxt.setEditable(false);
        this.moneyTxt.setEditable(false);
        this.dateHire.setDate(new Date());
        this.dateHire.setEnabled(false);
    }

    public void setCMND(String cmnd) {
        this.cmndTxt.setText(cmnd);
        this.cmndTxt.setEditable(false);
    }

    public void setItems(String cmnd, String first, String last, String phone, Date dob, boolean sex, String address, String job) {
        this.cmndTxt.setText(cmnd);
        this.firstNameTxt.setText(first);
        this.lastNameTxt.setText(last);
        this.phoneTxt.setText(phone);
        this.dateBirth.setDate(dob);
        this.addressTxt.setText(address);
        this.jobTxt.setText(job);
        this.maleCB.setSelected(sex);
        this.dateHire.setDate(new Date());

        this.dateHire.setEnabled(false);
        this.cmndTxt.setEditable(false);
        this.firstNameTxt.setEditable(false);
        this.lastNameTxt.setEditable(false);
        this.phoneTxt.setEditable(false);
        this.dateBirth.setEnabled(false);
        this.addressTxt.setEditable(false);
        this.jobTxt.setEditable(false);
        this.maleCB.setEnabled(false);
        this.femaleCB.setEnabled(false);
    }

    private void setBirth(String date) throws ParseException {
        Date d = new SimpleDateFormat("yyyy-MM-dd").parse(date);
        this.dateBirth.setDate(d);
    }

    private String convertUpper(String s) {
        String[] words = s.toLowerCase().split("\\s+");
        StringBuilder builder = new StringBuilder();
        for (var item : words) {
            char[] characters = item.toCharArray();
            characters[0] = Character.toUpperCase(characters[0]);
            builder.append(new String(characters));
            builder.append(" ");
        }

        return builder.toString().trim();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        idRoomTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        firstNameTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lastNameTxt = new javax.swing.JTextField();
        errFirstNm = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cmndTxt = new javax.swing.JTextField();
        errCMND = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        phoneTxt = new javax.swing.JTextField();
        errPhone = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        dateBirth = new com.toedter.calendar.JDateChooser();
        errBirth = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        maleCB = new javax.swing.JCheckBox();
        femaleCB = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        addressTxt = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        dateHire = new com.toedter.calendar.JDateChooser();
        errAddress = new javax.swing.JLabel();
        errHire = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        moneyTxt = new javax.swing.JTextField();
        addCustomerBT = new javax.swing.JButton();
        clcBT = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jobTxt = new javax.swing.JTextField();
        errJob = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ADD CUSTOMER INFORMATION");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("ID Room");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("First Name");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Last Name");

        errFirstNm.setForeground(new java.awt.Color(255, 0, 0));
        errFirstNm.setText(" ");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("CMND/CCCD");

        errCMND.setForeground(new java.awt.Color(255, 0, 0));
        errCMND.setText(" ");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("Phone Number");

        errPhone.setForeground(new java.awt.Color(255, 0, 0));
        errPhone.setText(" ");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Date of Birth");

        dateBirth.setDateFormatString("yyyy-MM-dd");

        errBirth.setForeground(new java.awt.Color(255, 0, 0));
        errBirth.setText(" ");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel13.setText("Sex");

        maleCB.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(maleCB);
        maleCB.setSelected(true);
        maleCB.setText("Male");

        femaleCB.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(femaleCB);
        femaleCB.setText("Female");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel14.setText("Address");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel15.setText("Date of Hire");

        dateHire.setDateFormatString("yyyy-MM-dd");

        errAddress.setForeground(new java.awt.Color(255, 0, 0));
        errAddress.setText(" ");

        errHire.setForeground(new java.awt.Color(255, 0, 0));
        errHire.setText(" ");

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel18.setText("Deposit Money");

        addCustomerBT.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addCustomerBT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-add-32.png"))); // NOI18N
        addCustomerBT.setText("ADD");
        addCustomerBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerBTActionPerformed(evt);
            }
        });

        clcBT.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        clcBT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-circled-x-32.png"))); // NOI18N
        clcBT.setText("CANCEL");
        clcBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clcBTActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Job");

        errJob.setForeground(new java.awt.Color(255, 0, 0));
        errJob.setText(" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel6))
                            .addGap(264, 264, 264))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(dateBirth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(firstNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(19, 19, 19)
                                            .addComponent(jLabel4)
                                            .addGap(48, 48, 48))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(18, 18, 18)
                                            .addComponent(lastNameTxt))))
                                .addComponent(errFirstNm, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(idRoomTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                                .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(addressTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(errBirth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel18)
                            .addComponent(moneyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(errAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5)
                    .addComponent(jLabel15)
                    .addComponent(cmndTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(jLabel7)
                    .addComponent(errCMND, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10)
                    .addComponent(phoneTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(errPhone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel13)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(maleCB)
                        .addGap(28, 28, 28)
                        .addComponent(femaleCB))
                    .addComponent(dateHire, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(errHire, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jobTxt)
                    .addComponent(errJob, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(addCustomerBT, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 172, Short.MAX_VALUE)
                .addComponent(clcBT, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(120, 120, 120))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idRoomTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmndTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errCMND)
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(phoneTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errPhone))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errFirstNm)))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(maleCB)
                        .addComponent(femaleCB)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(errBirth)
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addressTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dateHire, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(errAddress)
                    .addComponent(errHire))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel5))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(moneyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jobTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errJob)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clcBT, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addCustomerBT, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clcBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clcBTActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(rootPane, "You want to cancel?", "Message", JOptionPane.YES_OPTION) == JOptionPane.YES_OPTION) {
            checkAdd = false;
            this.dispose();
        }
    }//GEN-LAST:event_clcBTActionPerformed

    private void addCustomerBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerBTActionPerformed
        // TODO add your handling code here:

        if (checkOldOrNew) {
            String cmnd = cmndTxt.getText();
            String first = firstNameTxt.getText();
            String last = lastNameTxt.getText();
            String phone = phoneTxt.getText();
            String address = addressTxt.getText();

            Date birth = dateBirth.getDate();
            Date hire = dateHire.getDate();
            String job = jobTxt.getText();
            boolean sex = maleCB.isSelected();
            SimpleDateFormat sdm = new SimpleDateFormat("yyyy-MM-dd");
            Date d = new Date();
            sdm.format(d);

            if (first.equals("")) {
                errCMND.setText(" ");
                errFirstNm.setText("Please enter First Name");
                errPhone.setText(" ");
                errBirth.setText(" ");
                errHire.setText(" ");
                errJob.setText(" ");
                errAddress.setText(" ");
            } else if (!first.matches("[a-zA-ZÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼỀỀỂẾưăạảấầẩẫậắằẳẵặẹẻẽềềểếỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễệỉịọỏốồổỗộớờởỡợụủứừỬỮỰỲỴÝỶỸửữựỳỵỷỹ ]+$")) {
                errCMND.setText(" ");
                errFirstNm.setText("First name can't contain numeric or special characters");
                errPhone.setText(" ");
                errBirth.setText(" ");
                errHire.setText(" ");
                errJob.setText(" ");
                errAddress.setText(" ");
            } else if (last.equals("")) {
                errCMND.setText(" ");
                errFirstNm.setText("Please enter Last Name");
                errPhone.setText(" ");
                errBirth.setText(" ");
                errHire.setText(" ");
                errJob.setText(" ");
                errAddress.setText(" ");
            } else if (!last.matches("[a-zA-ZÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼỀỀỂẾưăạảấầẩẫậắằẳẵặẹẻẽềềểếỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễệỉịọỏốồổỗộớờởỡợụủứừỬỮỰỲỴÝỶỸửữựỳỵỷỹ ]+$")) {
                errCMND.setText(" ");
                errFirstNm.setText("Last name can't contain numeric or special characters");
                errPhone.setText(" ");
                errBirth.setText(" ");
                errHire.setText(" ");
                errJob.setText(" ");
                errAddress.setText(" ");
            } else if (phone.equals("")) {
                errCMND.setText(" ");
                errFirstNm.setText(" ");
                errPhone.setText("Please enter Phone Number");
                errBirth.setText(" ");
                errHire.setText(" ");
                errJob.setText(" ");
                errAddress.setText(" ");
            } else if (!phone.matches("^\\d{10}$")) {
                errCMND.setText(" ");
                errFirstNm.setText(" ");
                errPhone.setText("Invalid Phone number");
                errBirth.setText(" ");
                errHire.setText(" ");
                errJob.setText(" ");
                errAddress.setText(" ");
            } else if (birth == null) {
                errCMND.setText(" ");
                errFirstNm.setText(" ");
                errPhone.setText(" ");
                errBirth.setText("Please enter Date of Birth");
                errHire.setText(" ");
                errJob.setText(" ");
                errAddress.setText(" ");
            } else if (birth.compareTo(d) > 0) {
                errCMND.setText(" ");
                errFirstNm.setText(" ");
                errPhone.setText(" ");
                errBirth.setText("Date of Birth must not exceed " + sdm.format(d));
                errHire.setText(" ");
                errJob.setText(" ");
                errAddress.setText(" ");
            } else if (address.equals("")) {
                errCMND.setText(" ");
                errFirstNm.setText(" ");
                errPhone.setText(" ");
                errBirth.setText(" ");
                errHire.setText(" ");
                errJob.setText(" ");
                errAddress.setText("Please enter Address");
            } else if (!address.matches("^[a-zA-Z0-9ÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼỀỀỂẾưăạảấầẩẫậắằẳẵặẹẻẽềềểếỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễệỉịọỏốồổỗộớờởỡợụủứừỬỮỰỲỴÝỶỸửữựỳỵỷỹ, ]+$")) {
                errCMND.setText(" ");
                errFirstNm.setText(" ");
                errPhone.setText(" ");
                errBirth.setText(" ");
                errHire.setText(" ");
                errJob.setText(" ");
                errAddress.setText("Address contain alphanumeric characters and character(,)");
            } else if (job.equals("")) {
                errCMND.setText(" ");
                errFirstNm.setText(" ");
                errPhone.setText(" ");
                errBirth.setText(" ");
                errHire.setText(" ");
                errJob.setText("Please enter Job");
                errAddress.setText(" ");
            } else if (!job.matches("^[a-zA-ZÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼỀỀỂẾưăạảấầẩẫậắằẳẵặẹẻẽềềểếỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễệỉịọỏốồổỗộớờởỡợụủứừỬỮỰỲỴÝỶỸửữựỳỵỷỹ ]+$")) {
                errCMND.setText(" ");
                errFirstNm.setText(" ");
                errPhone.setText(" ");
                errBirth.setText(" ");
                errHire.setText(" ");
                errJob.setText("Cannot contain numeric or special characters");
                errAddress.setText(" ");
            } else {
                errCMND.setText(" ");
                errFirstNm.setText(" ");
                errPhone.setText(" ");
                errBirth.setText(" ");
                errHire.setText(" ");
                errJob.setText(" ");
                errAddress.setText(" ");

                SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
                String dateOfHire = s.format(hire);
                String dateOfBirth = s.format(birth);
                String idContract = "HD_" + idRoomTxt.getText() + "_" + dateOfHire;

                ContractModel contract = new ContractModel(idContract, idRoomTxt.getText(), dateOfHire, Double.valueOf(moneyTxt.getText()), null, null, 1);
                CustomerModel cus = new CustomerModel(cmndTxt.getText(), convertUpper(first), convertUpper(last), sex, dateOfBirth, phone, address, job, true);

                // Kiểm tra contract đã được lập chưa
                if (contractDAO.checkExist(idRoomTxt.getText())) {

                    // Chưa tồn tại contract của phòng đó, tiến hành thêm mới contract
                    if (contractDAO.insertContract(contract)) {
                        // Thêm khách thuê
                        if (cusDAO.insertCustomer(cus)) {

                            // Thêm chi tiết hợp đồng
                            ContractDetailModel detail = new ContractDetailModel(cus.getCMND(), contractDAO.getIDContract(idRoomTxt.getText()), dateOfHire, null, null, true);
                            if (detailContDAO.insertContractDetail(detail)) {

                                detailContDAO.updateEndDate(cus.getCMND(), contractDAO.getIDContract(idRoomTxt.getText()));

                                int max = roomDAO.getMax(idRoomTxt.getText());
                                int crr = roomDAO.getCurrent(idRoomTxt.getText()) + 1;

                                if (crr < max) {
                                    roomDAO.updateStatusRooom(idRoomTxt.getText(), crr, "TT2");
                                } else if (crr == max) {
                                    roomDAO.updateStatusRooom(idRoomTxt.getText(), crr, "TT3");
                                }

                                JOptionPane.showMessageDialog(rootPane, "Successfully!!!");
                                checkAdd = true;
                                this.dispose();
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Failed!!!");
                                this.dispose();
                            }
                        }
                    }
                } else {
                    if (cusDAO.insertCustomer(cus)) {
                        ContractDetailModel detail = new ContractDetailModel(cus.getCMND(), contractDAO.getIDContract(idRoomTxt.getText()), dateOfHire, null, null, true);
                        if (detailContDAO.insertContractDetail(detail)) {

                            detailContDAO.updateEndDate(cus.getCMND(), contractDAO.getIDContract(idRoomTxt.getText()));

                            int max = roomDAO.getMax(idRoomTxt.getText());
                            int crr = roomDAO.getCurrent(idRoomTxt.getText()) + 1;
                            if (crr < max) {
                                roomDAO.updateStatusRooom(idRoomTxt.getText(), crr, "TT2");
                            } else if (crr == max) {
                                roomDAO.updateStatusRooom(idRoomTxt.getText(), crr, "TT3");
                            }

                            JOptionPane.showMessageDialog(rootPane, "Successfully!!!");
                            checkAdd = true;
                            this.dispose();
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Failed!!!");
                            this.dispose();
                        }
                    }
                }
            }
        } else {
            String cmnd = cmndTxt.getText();
            String first = firstNameTxt.getText();
            String last = lastNameTxt.getText();
            String phone = phoneTxt.getText();
            String address = addressTxt.getText();

            Date birth = dateBirth.getDate();
            Date hire = dateHire.getDate();
            String job = jobTxt.getText();
            boolean sex = maleCB.isSelected();
            SimpleDateFormat sdm = new SimpleDateFormat("yyyy-MM-dd");
            Date d = new Date();
            sdm.format(d);

            SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
            String dateOfHire = s.format(hire);
            String dateOfBirth = s.format(birth);
            String idContract = "HD_" + idRoomTxt.getText() + "_" + dateOfHire;

            ContractModel contract = new ContractModel(idContract, idRoomTxt.getText(), dateOfHire, Double.valueOf(moneyTxt.getText()), null, null, 1);

            // Kiểm tra contract đã được lập chưa
            if (contractDAO.checkExist(idRoomTxt.getText())) {

                // Chưa tồn tại contract của phòng đó, tiến hành thêm mới contract
                if (contractDAO.insertContract(contract)) {
                    // Thêm khách thuê

                    // Thêm chi tiết hợp đồng
                    cusDAO.updateRentalStatus(cmnd, true);
                    ContractDetailModel detail = new ContractDetailModel(cmnd, contractDAO.getIDContract(idRoomTxt.getText()), dateOfHire, null, null, true);
                    if (detailContDAO.insertContractDetail(detail)) {

                        detailContDAO.updateEndDate(cmnd, contractDAO.getIDContract(idRoomTxt.getText()));

                        int max = roomDAO.getMax(idRoomTxt.getText());
                        int crr = roomDAO.getCurrent(idRoomTxt.getText()) + 1;

                        if (crr < max) {
                            roomDAO.updateStatusRooom(idRoomTxt.getText(), crr, "TT2");
                        } else if (crr == max) {
                            roomDAO.updateStatusRooom(idRoomTxt.getText(), crr, "TT3");
                        }

                        JOptionPane.showMessageDialog(rootPane, "Successfully!!!");
                        checkAdd = true;
                        this.dispose();
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Failed!!!");
                        this.dispose();
                    }

                }
            } else {
                ContractDetailModel detail = new ContractDetailModel(cmnd, contractDAO.getIDContract(idRoomTxt.getText()), dateOfHire, null, null, true);
                if (detailContDAO.insertContractDetail(detail)) {

                    detailContDAO.updateEndDate(cmnd, contractDAO.getIDContract(idRoomTxt.getText()));
                    cusDAO.updateRentalStatus(cmnd, true);
                    int max = roomDAO.getMax(idRoomTxt.getText());
                    int crr = roomDAO.getCurrent(idRoomTxt.getText()) + 1;
                    if (crr < max) {
                        roomDAO.updateStatusRooom(idRoomTxt.getText(), crr, "TT2");
                    } else if (crr == max) {
                        roomDAO.updateStatusRooom(idRoomTxt.getText(), crr, "TT3");
                    }

                    JOptionPane.showMessageDialog(rootPane, "Successfully!!!");
                    checkAdd = true;
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Failed!!!");
                    this.dispose();
                }
            }
        }


    }//GEN-LAST:event_addCustomerBTActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Windows".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(AddCustomerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(AddCustomerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(AddCustomerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(AddCustomerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                AddCustomerView dialog = new AddCustomerView(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCustomerBT;
    private javax.swing.JTextField addressTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clcBT;
    private javax.swing.JTextField cmndTxt;
    private com.toedter.calendar.JDateChooser dateBirth;
    private com.toedter.calendar.JDateChooser dateHire;
    private javax.swing.JLabel errAddress;
    private javax.swing.JLabel errBirth;
    private javax.swing.JLabel errCMND;
    private javax.swing.JLabel errFirstNm;
    private javax.swing.JLabel errHire;
    private javax.swing.JLabel errJob;
    private javax.swing.JLabel errPhone;
    private javax.swing.JCheckBox femaleCB;
    private javax.swing.JTextField firstNameTxt;
    private javax.swing.JTextField idRoomTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jobTxt;
    private javax.swing.JTextField lastNameTxt;
    private javax.swing.JCheckBox maleCB;
    private javax.swing.JTextField moneyTxt;
    private javax.swing.JTextField phoneTxt;
    // End of variables declaration//GEN-END:variables
}
